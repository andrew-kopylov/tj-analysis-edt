
#Область ОбработчикиФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	ТипПлатформыLinux = (СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86
	Или СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86_64);
	
	РазрядностьПлатформы64 = (СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86_64
	Или СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64);
	
	Если РазрядностьПлатформы64 Тогда
		Если ТипПлатформыLinux Тогда
			ПутьКФайлуКонфТЖ = "/opt/1C/v8.3/x86_64/conf/logcfg.xml";
		Иначе
			ПутьКФайлуКонфТЖ = "C:\Program Files\1cv8\conf\logcfg.xml";
		КонецЕсли;
	Иначе
		Если ТипПлатформыLinux Тогда
			ПутьКФайлуКонфТЖ = "/opt/1C/v8.3/i386/conf/logcfg.xml";
		Иначе
			ПутьКФайлуКонфТЖ = "C:\Program Files (x86)\1cv8\conf\logcfg.xml";
		КонецЕсли;
	КонецЕсли;
	
	// Добавление команд заполнения скрипта.
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Для Каждого ЭлементСкрипт Из ОбработкаОбъект.ПолучитьСкриптыБаш() Цикл
		
		НоваяКоманда = Команды.Добавить("ЗаполнитьСкрипт_" + ЭлементСкрипт.Значение);
		НоваяКоманда.Действие = "Подключаемый_ЗаполнитьБашСкрипт";
		НоваяКоманда.Заголовок = ЭлементСкрипт.Представление;
		
		НовыйЭлемент = Элементы.Добавить("Элемент_" + НоваяКоманда.Имя, Тип("КнопкаФормы"), Элементы.ГруппаЗаполнитьСкрипт);
		НовыйЭлемент.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
		НовыйЭлемент.ИмяКоманды = НоваяКоманда.Имя;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	СохранитьТаблицуВНастройках(Настройки, "ПоискЖурналов", Объект.ПоискЖурналов);
	СохранитьТаблицуВНастройках(Настройки, "События", Объект.События);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)

	ВосстановитьТаблицуИзНастроек(Настройки, "ПоискЖурналов", Объект.ПоискЖурналов);
	ВосстановитьТаблицуИзНастроек(Настройки, "События", Объект.События);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд

// Конфигурация ТЖ

&НаКлиенте
Процедура ПрочитатьКонфигурациюТЖНаСервере(Команда)	
	
	ТекстКонфТЖ = ПолучитьКонфигурациюТЖ(ПутьКФайлуКонфТЖ);
	Если ТекстКонфТЖ = Неопределено Тогда
		Сообщить("Конфигурационный файл ТЖ не существует");
		Возврат;
	КонецЕсли;
	
	КонфигурацияТЖСервер = ТекстКонфТЖ;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьКонфигурациюТЖНаСервере(Команда)
	
	ТекстКонфигурации = ПолучитьКонфигурациюТЖ(ПутьКФайлуКонфТЖ);
	Если ТекстКонфигурации = Неопределено Тогда
		
		ЗаписатьКонфигурациюТЖ(ПутьКФайлуКонфТЖ, КонфигурацияТЖСервер);
		Сообщить("Создан новый файл конфигурации ТЖ");
		
	ИначеЕсли ТекстКонфигурации = КонфигурацияТЖСервер Тогда
		
		Сообщить("Нет изменений в конфигурации ТЖ.");
		
	ИначеЕсли ПустаяСтрока(ТекстКонфигурации) Тогда
		
		ЗаписатьКонфигурациюТЖ(ПутьКФайлуКонфТЖ, КонфигурацияТЖСервер);
		Сообщить("Записана новая конфигурация ТЖ");
		
	ИначеЕсли ПустаяСтрока(КонфигурацияТЖСервер) Тогда
		
		ТекстВопроса = "Текущая конфигурация ТЖ не пустая. Удалить файл конфигурации?";
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("ТекущаяКонфигурацияТЖ", ТекстКонфигурации);
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаписатьКонфигурациюТЖНаСервереВопросЗавершение", ЭтотОбъект, ПараметрыОповещения);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		// Запись новой конфигурации ТЖ.
		ЗаписатьКонфигурациюТЖ(ПутьКФайлуКонфТЖ, КонфигурацияТЖСервер);
		Сообщить("Изменена конфигурация ТЖ");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьКонфигурациюТЖНаСервереВопросЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписатьКонфигурациюТЖ(ПутьКФайлуКонфТЖ, КонфигурацияТЖСервер);
	Сообщить("Удален файл конфигурации ТЖ");
		
КонецПроцедуры

&НаКлиенте
Процедура НастройкаТЖПоУмолчанию(Команда)
	
	КаталогФайловТЖ = КаталогФайловТЖПоУмолчанию(ТипПлатформыLinux);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НастройкаТЖПоУмолчаниюВыборКаталога", ЭтотОбъект);
	ПоказатьВводСтроки(ОписаниеОповещения, КаталогФайловТЖ, "Общий каталог файлов тех. журнала"); 
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаТЖПоУмолчаниюВыборКаталога(Результат, ПараметрыОповещения) Экспорт
	
	Если Не ПустаяСтрока(Результат) Тогда
		
		ОписаниеОшибки = "";
		НастройкаТЖПоУмолчаниюНаСервере(Результат, ОписаниеОшибки);
		
		Если Не ПустаяСтрока(ОписаниеОшибки) Тогда
			Сообщить(ОписаниеОшибки);
			ПоказатьПредупреждение(, "Ошибка заполнения конфигурации тех. журнала по умолчанию.");
		КонецЕсли;
		
	Иначе
		ПоказатьПредупреждение(, "Не выбран каталог файлов тех. журнала");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастройкаТЖПоУмолчаниюНаСервере(КаталогФайловТЖ, ОписаниеОшибки = "")

	ОбъектКаталогТЖ = Новый Файл(КаталогФайловТЖ);
	Если Не ОбъектКаталогТЖ.Существует() Тогда
		Попытка 
			СоздатьКаталог(КаталогФайловТЖ);
		Исключение
			ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ШаблонНастройкиТЖ = ОбработкаОбъект.ПолучитьТекстМакета("LogcfgDefault");
	
	Разделитель = ?(СтрНайти(КаталогФайловТЖ, "/"), "/", "\");
	
	// %server-name% - ИмяСервера
	// %log-path% - общий каталог тех. журналов
	НастройкаТЖ = ШаблонНастройкиТЖ;
	НастройкаТЖ = СтрЗаменить(НастройкаТЖ, "%log-path%\", КаталогФайловТЖ + Разделитель);
	НастройкаТЖ = СтрЗаменить(НастройкаТЖ, "%server-name%", ИмяКомпьютера());
	
	КонфигурацияТЖСервер = НастройкаТЖ;
	
КонецПроцедуры

// Общие параметры чтения ТЖ

&НаКлиенте
Процедура ТекущийЧасДатаНачала(Команда)
	Объект.ДатаНачала = НачалоЧаса(ТекущаяДата());
КонецПроцедуры

&НаКлиенте
Процедура НачалоЧасаДатаНачала(Команда)
	Объект.ДатаНачала = НачалоЧаса(Объект.ДатаОкончания);
КонецПроцедуры

&НаКлиенте
Процедура ТекущийЧасДатаОкончания(Команда)
	Объект.ДатаОкончания = КонецЧаса(ТекущаяДата());
КонецПроцедуры

&НаКлиенте
Процедура КонецЧасаДатаОкончания(Команда)
	Объект.ДатаОкончания = КонецЧаса(Объект.ДатаНачала);
КонецПроцедуры

&НаКлиенте
Процедура НайтиФайлыНаКлиенте(Команда)
	НайтиФайлыНаСервере();
	СохраняемыеВНастройкахДанныеМодифицированы = Истина;
КонецПроцедуры

&НаСервере
Процедура НайтиФайлыНаСервере()
	
	Объект.ФайлыЖурналов.Очистить();

	Если Не ЗначениеЗаполнено(Объект.МинРазмерФайла) Тогда
		Объект.МинРазмерФайла = 100; // 100 байт
	КонецЕсли;
		
	Для Каждого СтрокаПоискаЖурнала Из Объект.ПоискЖурналов Цикл
		
		Если Не СтрокаПоискаЖурнала.Пометка Тогда
			Продолжить;
		КонецЕсли;

		ПоискФайлов = Неопределено;
		Если Не ПустаяСтрока(СтрокаПоискаЖурнала.МаскаПутиКФайлам) Тогда
			ПоискФайлов = РегулярноеВыражение(СтрокаПоискаЖурнала.МаскаПутиКФайлам, Ложь, Истина, Ложь);
		КонецЕсли;
		
		ПутьКФайлам = СтрокаПоискаЖурнала.ПутьКФайлам;
		ИмяФайла = "*.log";
		
		НайденныеФайлы = НайтиФайлы(ПутьКФайлам, ИмяФайла, Истина);
		Для Каждого Файл из НайденныеФайлы Цикл

			РазмерФайла = Файл.Размер();
			Если РазмерФайла < Объект.МинРазмерФайла Тогда
				Продолжить;
			КонецЕсли;
			
			Если ПоискФайлов <> Неопределено Тогда
				Если Не ПроверитьРегулярноеВыражение(ПоискФайлов, Файл.Путь) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
					
			Папка = Новый Файл(Файл.Путь);

			МаскаПроцесса = СтрокаПоискаЖурнала.МаскаПроцесса;
			Если Не ПустаяСтрока(МаскаПроцесса) Тогда
				Если СтрНайти(ВРег(Папка.Имя), ВРег(МаскаПроцесса)) = 0 Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;	

			НоваяСтрока = Объект.ФайлыЖурналов.Добавить();
			НоваяСтрока.Путь = Файл.ПолноеИмя;
			НоваяСтрока.Размер = РазмерФайла / 1024;
			
			ДанныеЛога = РаспарситьИмяФайлаТЖ(Файл.ПолноеИмя);				
			НоваяСтрока.Процесс = ДанныеЛога.Процесс;
			НоваяСтрока.НомерПроцесса = ДанныеЛога.НомерПроцесса;
			
			ДатаЖурнала = ДанныеЛога.Дата;
			Если ЗначениеЗаполнено(Объект.ДатаНачала) Тогда
				Если НачалоЧаса(ДатаЖурнала) < НачалоЧаса(Объект.ДатаНачала) Тогда
					Объект.ФайлыЖурналов.Удалить(НоваяСтрока);
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда
				Если НачалоЧаса(ДатаЖурнала) > НачалоЧаса(Объект.ДатаОкончания) Тогда
					Объект.ФайлыЖурналов.Удалить(НоваяСтрока);
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			НоваяСтрока.Дата = ДатаЖурнала;
			
		КонецЦикла;	
	
	КонецЦикла;
		
КонецПроцедуры

// Чтение текстов файлов ТЖ

&НаКлиенте
Процедура ПрочитатьТекстФайлаТЖ(Команда)
	ПрочитатьТекстыФайловТЖ(Элементы.Файлы.ВыделенныеСтроки);
КонецПроцедуры

&НаСервере
Процедура ПрочитатьТекстыФайловТЖ(Знач МассивИдСтрокФайлов)
	
	ТаблицаЗаписейТЖ = Новый ТаблицаЗначений;
	ТаблицаЗаписейТЖ.Колонки.Добавить("ИмяФайла");
	ТаблицаЗаписейТЖ.Колонки.Добавить("Дата");
	ТаблицаЗаписейТЖ.Колонки.Добавить("Время");
	ТаблицаЗаписейТЖ.Колонки.Добавить("НомерСтроки");
	ТаблицаЗаписейТЖ.Колонки.Добавить("СтрокаЖурнала");
	ТаблицаЗаписейТЖ.Колонки.Добавить("ПерваяСтрока");
	
	Для Каждого ИдСтрокиФайла Из МассивИдСтрокФайлов Цикл
		СтрокаФайла = Объект.ФайлыЖурналов.НайтиПоИдентификатору(ИдСтрокиФайла);
		ПрочитатьТекстОдногоФайлаТЖ(СокрЛП(СтрокаФайла.Путь), СтрокаФайла.НомерСтроки, ТаблицаЗаписейТЖ);
	КонецЦикла;
	
	ТаблицаЗаписейТЖ.Сортировать("Дата, Время, ИмяФайла, НомерСтроки");
	ТекстФайлаТЖ = СтрСоединить(ТаблицаЗаписейТЖ.ВыгрузитьКолонку("СтрокаЖурнала"), Символы.ПС);
			
КонецПроцедуры

&НаСервере
Процедура ПрочитатьТекстОдногоФайлаТЖ(ИмяФайла, НомерФайла, ТаблицаЗаписейТЖ)
	
	ФайлТЖ = Новый Файл(ИмяФайла);
	ИмяТЖ = ФайлТЖ.ИмяБезРасширения;
	СтрНомерФайла = Формат(НомерФайла, "ЧЦ=3; ЧВН=; ЧГ=0");
	
	ДанныеЛогаТЖ = РаспарситьИмяФайлаТЖ(ИмяФайла);
	ПроцессТЖ = Лев(ДанныеЛогаТЖ.Процесс + "@@@@@@@@@@@", 10) + "-" + Формат(ДанныеЛогаТЖ.НомерПроцесса, "ЧЦ=5; ЧДЦ=0; ЧВН=; ЧГ=0");
	ДатаЖурнала = ДанныеЛогаТЖ.Дата;
	
	ЧтениеТекста = Новый ЧтениеТекста(ИмяФайла, "UTF-8",,, Ложь);
	
	//	Условия фильтрации строк для вывода строк ТЖ.
	ФильтрСтрок = ПолучитьПравилаПоиска(ШаблонСтрокФайлаТЖ);
	ФильтрСтрокПропустить = ПолучитьПравилаПоиска(ШаблонСтрокФайлаТЖИсключение);
	ПроверятьФильтрСтрок = ФильтрСтрок <> Неопределено Или ФильтрСтрокПропустить <> Неопределено;
		
	НомерСтрокиЖурнала = 0;
	СтрокаЖурнала = "";
	ВремяТЖ = "";
	
	ДобавитьПрефикс = ДобавитьНомераСтрокВТекстФайлаТЖ
		Или ДобавитьДатуВСтрокеТЖ
		Или ДобавитьЧасВСтрокеТЖ;
	
	ПараметрыЖурнала = Новый Структура;
	ПараметрыЖурнала.Вставить("ДобавитьПрефикс", ДобавитьПрефикс);
	ПараметрыЖурнала.Вставить("ДобавитьНомераСтрок", ДобавитьНомераСтрокВТекстФайлаТЖ);
	ПараметрыЖурнала.Вставить("ДобавитьДату", ДобавитьДатуВСтрокеТЖ);
	ПараметрыЖурнала.Вставить("ДобавитьЧас", ДобавитьЧасВСтрокеТЖ);
	ПараметрыЖурнала.Вставить("Имя", ИмяТЖ);
	ПараметрыЖурнала.Вставить("Процесс", ПроцессТЖ);
	ПараметрыЖурнала.Вставить("Дата", Формат(ДатаЖурнала, "ДФ=yy-MM-dd"));
	ПараметрыЖурнала.Вставить("Час", Формат(ДатаЖурнала, "ДФ=HH"));
	ПараметрыЖурнала.Вставить("ФильтрСтрок", ФильтрСтрок);
	ПараметрыЖурнала.Вставить("ФильтрСтрокПропустить", ФильтрСтрокПропустить);
	ПараметрыЖурнала.Вставить("ПроверятьФильтрСтрок", ПроверятьФильтрСтрок);
	ПараметрыЖурнала.Вставить("ТекущаяЗаписьВремя");
	ПараметрыЖурнала.Вставить("ТекущаяЗаписьНомерПервойСтроки");
		
	БуфферСтрокТЖ = Новый Массив;
	
	ОграничиватьКоличествоСтрокЧтения = ЗначениеЗаполнено(КоличествоСтрокТЖПрочитать);
	Если Не ЗначениеЗаполнено(ЧитатьФайлТЖНачинаяСоСтроки) Тогда
		ЧитатьФайлТЖНачинаяСоСтроки = 1;
	КонецЕсли;
	МаксимальнаяСтрокаТЖЧтения = ЧитатьФайлТЖНачинаяСоСтроки + КоличествоСтрокТЖПрочитать - 1;
	
	ОграничиватьКоличествоСтрокВывода = ЗначениеЗаполнено(КоличествоСтрокТЖВывести);
	КоличествоСтрокФайлаТЖОтобраноКВыводу = 0;
	
	ПропуститьСтрокиДоСледующейПервой = Ложь;
	
	Пока СледующаяСтрока(ЧтениеТекста, СтрокаЖурнала) Цикл
		
		ПерваяСтрока = Ложь;
		
		НомерСтрокиЖурнала = НомерСтрокиЖурнала + 1;
		Если НомерСтрокиЖурнала < ЧитатьФайлТЖНачинаяСоСтроки Тогда
			Продолжить;
		КонецЕсли;
		
		ПозицияДТ = СтрНайти(СтрокаЖурнала, ":");
		ПозицияТЧК = СтрНайти(СтрокаЖурнала, ".");
		
		// [BOM]MM:SS.hhhhhh-duration - 11:00-123456-0,EVENTNAME,LEVEL...
		ПерваяСтрока = ПозицияДТ > 2 И ПозицияДТ < 7 И (ПозицияТЧК - ПозицияДТ = 3);
		Если ПерваяСтрока Тогда
			//	Сброс данных буфера в таблицу строк журнала.
			Если БуфферСтрокТЖ.Количество() > 0 Тогда
				// Вывод буфера строк записи ТЖ в таблицу записей ТЖ
				// с проверкой условий вывода по тексту записи.
				Если ДобавитьЗаписьВТаблицуТЖ(ПараметрыЖурнала, БуфферСтрокТЖ, ТаблицаЗаписейТЖ) Тогда
					КоличествоСтрокФайлаТЖОтобраноКВыводу = КоличествоСтрокФайлаТЖОтобраноКВыводу + БуфферСтрокТЖ.Количество();
					Если ОграничиватьКоличествоСтрокВывода 
						И КоличествоСтрокФайлаТЖОтобраноКВыводу > КоличествоСтрокТЖВывести Тогда
						БуфферСтрокТЖ.Очистить();
						Прервать;
				    КонецЕсли;
				КонецЕсли;
				БуфферСтрокТЖ.Очистить();
			КонецЕсли;
			Если ОграничиватьКоличествоСтрокЧтения
				И НомерСтрокиЖурнала > КоличествоСтрокТЖПрочитать Тогда
				Прервать;
			КонецЕсли;			
			
			// Чтение параметров следующего события журнала.
			
			ПропуститьСтрокиДоСледующейПервой = Ложь;
			
			ПерваяСтрока = Истина;
			НомерПервойСтрокиЖурнала = НомерСтрокиЖурнала;
			ВремяТЖ = Лев(СтрокаЖурнала, 12);
			              
			Если Не ПустаяСтрока(МинВремяЧтенияФайлаТЖ) И ВремяТЖ < МинВремяЧтенияФайлаТЖ Тогда
				ПропуститьСтрокиДоСледующейПервой = Истина;
			КонецЕсли;
			
			Если Не ПустаяСтрока(МаксВремяЧтенияФайлаТЖ) И ВремяТЖ > (МаксВремяЧтенияФайлаТЖ + "Z") Тогда
				ПропуститьСтрокиДоСледующейПервой = Истина;
			КонецЕсли;
			
			ПараметрыЖурнала.ТекущаяЗаписьНомерПервойСтроки = НомерСтрокиЖурнала;
			ПараметрыЖурнала.ТекущаяЗаписьВремя = ВремяТЖ;

		КонецЕсли;
			
		Если ПропуститьСтрокиДоСледующейПервой Тогда
			Продолжить;
		КонецЕсли;
		
		БуфферСтрокТЖ.Добавить(СтрокаЖурнала);
				
	КонецЦикла;
	
	ЧтениеТекста.Закрыть();

	Если БуфферСтрокТЖ.Количество() > 0 Тогда
		ДобавитьЗаписьВТаблицуТЖ(ПараметрыЖурнала, БуфферСтрокТЖ, ТаблицаЗаписейТЖ);
	КонецЕсли;
				
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДобавитьЗаписьВТаблицуТЖ(ПараметрыЖурнала, БуфферСтрокТЖ, ТаблицаЗаписейТЖ)
	
	ТекстЗаписиТЖ = СтрСоединить(БуфферСтрокТЖ, Символы.ПС);
	
	ВывестиЗаписьТЖ = Не ПараметрыЖурнала.ПроверятьФильтрСтрок
	Или ПроверитьСтрокуТЖпоШаблону(ПараметрыЖурнала, ТекстЗаписиТЖ);
		
	Если ВывестиЗаписьТЖ Тогда
		ПрефиксЗаписи = ПрефиксСтрокиЖурнала(ПараметрыЖурнала);  
		НоваяСтрока = ТаблицаЗаписейТЖ.Добавить();
		НоваяСтрока.Дата = ПараметрыЖурнала.Дата; 
		НоваяСтрока.Время = ПараметрыЖурнала.Час + ":" + ПараметрыЖурнала.ТекущаяЗаписьВремя;
		НоваяСтрока.ИмяФайла = ПараметрыЖурнала.Имя;
		НоваяСтрока.НомерСтроки = ПараметрыЖурнала.ТекущаяЗаписьНомерПервойСтроки;
		НоваяСтрока.СтрокаЖурнала = ПрефиксЗаписи + ТекстЗаписиТЖ;
	КонецЕсли;

	Возврат ВывестиЗаписьТЖ;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьСтрокуТЖпоШаблону(ПараметрыЖурнала, СтрокаТЖ)
	
	ВключитьПоПравилуВключения = ПроверитьСтрокуПоПравиламПоиска(ПараметрыЖурнала.ФильтрСтрок, СтрокаТЖ);

	ВключитьПоПравилуИсключения = Истина;
	Если ВключитьПоПравилуВключения Тогда
		ФильтрСтрокПропустить = ПараметрыЖурнала.ФильтрСтрокПропустить;
		Если ФильтрСтрокПропустить <> Неопределено Тогда
			ВключитьПоПравилуИсключения = Не ПроверитьСтрокуПоПравиламПоиска(ФильтрСтрокПропустить, СтрокаТЖ);	
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВключитьПоПравилуВключения И ВключитьПоПравилуИсключения;
		
КонецФункции

&НаСервереБезКонтекста
Функция ПрефиксСтрокиЖурнала(ПараметрыЖурнала)
	
	Если Не ПараметрыЖурнала.ДобавитьПрефикс Тогда
		Возврат "";
	КонецЕсли;
	
	Префикс = "";
	
	Если ПараметрыЖурнала.ДобавитьЧас Тогда
		Префикс = ПараметрыЖурнала.Час + ":" + Префикс;
	КонецЕсли;
	
	Если ПараметрыЖурнала.ДобавитьДату Тогда
		Префикс = ПараметрыЖурнала.Дата + "#" + Префикс;
	КонецЕсли;

	Если ПараметрыЖурнала.ДобавитьНомераСтрок Тогда
		НомерСтроки = ПараметрыЖурнала.ТекущаяЗаписьНомерПервойСтроки;
		Префикс = Формат(НомерСтроки, "ЧЦ=9; ЧВН=; ЧГ=0") + "#" + Префикс;
	КонецЕсли;
		
	Возврат Префикс;
	
КонецФункции

&НаКлиенте
Процедура Прочитать(Команда)

	ТекстВопроса = НСтр("ru = 'Чтение данных журналов может занять длительное время. Продолжить?'");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПрочитатьПродолжение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьПродолжение(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПрочитатьДанныеФайловТЖ(Элементы.Файлы.ВыделенныеСтроки);
		ПоказатьПредупреждение(, "Данные журналов прочитаны");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СобытияУстановитьФлажки(Команда)
	УстановитьЗначениеПоляТаблицы(Объект.События, Элементы.События, Истина, "Пометка");
КонецПроцедуры

&НаКлиенте
Процедура СобытияСнятьФлажки(Команда)
	УстановитьЗначениеПоляТаблицы(Объект.События, Элементы.События, Ложь, "Пометка");
КонецПроцедуры

&НаКлиенте
Процедура ЗагузитьФайлыНаКлиент(Команда)
	
	ВыделенныеСтроки = Элементы.Файлы.ВыделенныеСтроки;
	
	ЗагузитьФайлыНаКлиентНаСервере(ВыделенныеСтроки);
	
	Если Не ПустаяСтрока(АдресХранилищаАрхива) Тогда
		
		ПолучаемыеФайлы = Новый Массив;
		ПолучаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла("АрхивФайловТЖ.zip", АдресХранилищаАрхива));
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗагузитьФайлыНаКлиентЗавершение", ЭтотОбъект);
		НачатьПолучениеФайлов(ОписаниеОповещения, ПолучаемыеФайлы,, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагузитьФайлыНаКлиентНаСервере(Знач МассивИдентификаторов)

	АдресХранилищаАрхива = "";
	
	Файлы = Новый Массив;
	Для Каждого ИдентификаторСтроки Из МассивИдентификаторов Цикл
		ИмяФайла = Объект.ФайлыЖурналов.НайтиПоИдентификатору(ИдентификаторСтроки).ИмяФайла;
		Файл = Новый Файл(ИмяФайла);
		Если Файл.Существует() Тогда
			Файлы.Добавить(Файл.ПолноеИмя);
		КонецЕсли;
	КонецЦикла;
	         
	Если Файлы.Количество() > 0 Тогда      
		
		ИмяВременногоФайлаАрхива = ПолучитьИмяВременногоФайла(".zip");
			
		ЗаписьАрхива = Новый ЗаписьZipФайла;
		ЗаписьАрхива.Открыть(ИмяВременногоФайлаАрхива);
		
		Для Каждого ИмяФайла Из Файлы Цикл
			ЗаписьАрхива.Добавить(ИмяФайла, РежимСохраненияПутейZIP.СохранятьПолныеПути);
		КонецЦикла;
		
		ЗаписьАрхива.Записать();

		ДвоичныеДанные = Новый ДвоичныеДанные(ИмяВременногоФайлаАрхива);
		УдалитьФайлы(ИмяВременногоФайлаАрхива);
		
		АдресХранилищаАрхива = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);

	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗагузитьФайлыНаКлиентЗавершение(Результат, ПараметрыОповещения) Экспорт
		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗаполнитьБашСкрипт(Команда)
	
	ИмяКоманды = Команда.Имя;
	ЗаполнитьБашСкриптНаСервере(ИмяКоманды);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьБашСкриптНаСервере(ИмяКоманды)
		
	ИмяМакета = СтрЗаменить(ИмяКоманды, "ЗаполнитьСкрипт_", "");
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	// %log-path% = log-root/log-name/process-name/{log-date}.log
	
	// Пример, исключения в 18 часов 06.10.2020 года в рабочих процессах.
	// %log-path% = c:\1c-logs\excp\rphost_*\20100618.log
	
	ПутиКЖурналам = Новый Массив;
	Для Каждого СтрокаПоискаЖурнала Из Объект.ПоискЖурналов Цикл
		
		Если Не СтрокаПоискаЖурнала.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		МаскаПутиКЖурналам = ПолучитьПутьКФайлуБаш(СтрокаПоискаЖурнала.ПутьКФайлам, ТипПлатформыLinux);
		МаскаПутиКЖурналам = МаскаПутиКЖурналам + "/" + СтрокаПоискаЖурнала.МаскаПутиКФайлам + "*";
		МаскаПутиКЖурналам = МаскаПутиКЖурналам + "/" + СтрокаПоискаЖурнала.МаскаПроцесса + "*";
		
		ДатаЛога = Объект.ДатаНачала;
		Пока НачалоЧаса(ДатаЛога) < КонецЧаса(Объект.ДатаОкончания) Цикл
			ПутьКЖурналу = МаскаПутиКЖурналам + "/" + Формат(ДатаЛога, "ДФ=yyMMddHH") + ".log";
			ПутиКЖурналам.Добавить(ПутьКЖурналу);
			ДатаЛога = КонецЧаса(ДатаЛога) + 1;
		КонецЦикла;
		
	КонецЦикла;
	
	СтрокаПутиКЖурналам = СтрСоединить(ПутиКЖурналам, " \" + Символы.ПС + Символы.Таб);
	
	ШаблонСкрипта = ОбработкаОбъект.ПолучитьТекстМакета(ИмяМакета);	
	ШаблонСкрипта = СтрЗаменить(ШаблонСкрипта, "%log-path%", СтрокаПутиКЖурналам);
	
	ТекстБашСкрипта = ШаблонСкрипта; 

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиЭлементов

&НаКлиенте
Процедура ДатаНачалаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Объект.ДатаНачала = Объект.ДатаНачала + Направление * 3600;	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияРегулирование(Элемент, Направление, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Объект.ДатаОкончания = Объект.ДатаОкончания + Направление * 3600;	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)

	//	Обновление списка файлов чтения ТЖ.
	СписокФайловТЖДляЧтенияТекста = "";
	МассивИменФайлов = Новый Массив;
	Для Каждого ИдСтроки Из Элементы.Файлы.ВыделенныеСтроки Цикл
		СтрокаФайла = Объект.ФайлыЖурналов.НайтиПоИдентификатору(ИдСтроки);
		МассивИменФайлов.Добавить("#" + Формат(СтрокаФайла.НомерСтроки, "ЧЦ=3; ЧВН=; ЧГ=0") + " - " + СтрокаФайла.Путь);
	КонецЦикла;
	СписокФайловТЖДляЧтенияТекста = СтрСоединить(МассивИменФайлов, "; ");
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяПроцессаЗавершениеВыбора(Результат, ПараметрыОповещения) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ИмяПроцесса = Результат.Значение;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПриИзменении(Элемент)
	СохраняемыеВНастройкахДанныеМодифицированы = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СобытияПриИзменении(Элемент)
	СохраняемыеВНастройкахДанныеМодифицированы = Истина;
КонецПроцедуры

#КонецОбласти

#Область ФайлКонфигурацииТЖ

&НаСервереБезКонтекста
Функция ЗаписатьКонфигурациюТЖ(ПутьКФайлу, ТекстКонфТЖ, СоздатьКопию = Истина)
	
	ФайлКонфТЖ = Новый Файл(ПутьКФайлу);

	Если Не ПустаяСтрока(ТекстКонфТЖ) Тогда
		КаталогКонф = Новый Файл(ФайлКонфТЖ.Путь);
		Если Не КаталогКонф.Существует() Тогда
			СоздатьКаталог(КаталогКонф.ПолноеИмя);
		КонецЕсли;
	КонецЕсли;
	
	Если СоздатьКопию Тогда
		ТекущийТекстКонфТЖ = ПолучитьКонфигурациюТЖ(ПутьКФайлу);
		Если Не ПустаяСтрока(ТекущийТекстКонфТЖ) И ТекущийТекстКонфТЖ <> ТекстКонфТЖ ТОгда
			ПутьКФайлуКопии = ПутьКФайлу + "-" + Формат(ТекущаяДата(), "ДФ=yyMMddHHmmss") + ".bak";
			ЗаписатьКонфигурациюТЖ(ПутьКФайлуКопии, ТекущийТекстКонфТЖ, Ложь);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекстКонфТЖ) Тогда
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.УстановитьТекст(ТекстКонфТЖ);
		ТекстовыйДокумент.Записать(ПутьКФайлу);
	Иначе
		Если ФайлКонфТЖ.Существует() И ФайлКонфТЖ.ЭтоФайл() Тогда
			УдалитьФайлы(ПутьКФайлу);
		КонецЕсли;
	КонецЕсли;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКонфигурациюТЖ(ПутьКФайлу)
	
	ФайлКонфТЖ = Новый Файл(ПутьКФайлу);
	Если Не ФайлКонфТЖ.Существует() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ПутьКФайлу);
	
	Возврат ТекстовыйДокумент.ПолучитьТекст();

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КаталогФайловТЖПоУмолчанию(ТипПлатформыLinux)

	Если ТипПлатформыLinux Тогда
		КаталогТЖ = "/home/usr1cv8/log"
	Иначе
		КаталогТЖ = "c:\users\usr1cv8\log"
	КонецЕсли;
	
	Возврат КаталогТЖ;
	
КонецФункции

#КонецОбласти

#Область ПарсингТехническогоЖурнала

&НаСервере
Процедура ПрочитатьДанныеФайловТЖ(ИдентификаторыСтрокФайлов)
	
	НачалоЧтения = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	ОтборСобытий = Новый Структура("Пометка", Истина);
	События = Объект.События.Выгрузить(ОтборСобытий);
	
	//	Установка видимости группировок и ресурсов.
	ИспользуемыеСобытия = Объект.События.Выгрузить(Новый Структура("Пометка", Истина));
	Если ИспользуемыеСобытия.Количество() = 1 Тогда
		СтрокаСобытия = ИспользуемыеСобытия[0];
		Для НомерГруппироки = 1 По 5 Цикл
			ИмяГруппировки = СтрокаСобытия["Группировка" + НомерГруппироки];
			ЭлементДанныхГруппировки = Элементы["ДанныеГруппировка" + НомерГруппироки];
			Если Не ПустаяСтрока(ИмяГруппировки) Тогда
				ЭлементДанныхГруппировки.Видимость = Истина;
				ЭлементДанныхГруппировки.Заголовок = ИмяГруппировки;
			Иначе
				ЭлементДанныхГруппировки.Видимость = Ложь;
				ЭлементДанныхГруппировки.Заголовок = "";
			КонецЕсли;
		КонецЦикла;
		Для НомерРесурса = 1 По 5 Цикл
			ИмяРесурса = СтрокаСобытия["Ресурс" + НомерРесурса];
			ЭлементДанныхРесурса = Элементы["ДанныеРесурс" + НомерРесурса];
			Если Не ПустаяСтрока(ИмяРесурса) Тогда
				ЭлементДанныхРесурса.Видимость = Истина;
				ЭлементДанныхРесурса.Заголовок = ИмяРесурса;
			Иначе
				ЭлементДанныхРесурса.Видимость = Ложь;
				ЭлементДанныхРесурса.Заголовок = "";
			КонецЕсли;
		КонецЦикла;
		Элементы.ДанныеПериод.Видимость = ЗначениеЗаполнено(СтрокаСобытия.ПериодичностьМин);
	Иначе
		Для НомерГруппироки = 1 По 5 Цикл
			ЭлементДанныхГруппировки = Элементы["ДанныеГруппировка" + НомерГруппироки];
			ЭлементДанныхГруппировки.Видимость = Истина;
			ЭлементДанныхГруппировки.Заголовок = "";
		КонецЦикла;
		Для НомерРесурса = 1 По 5 Цикл
			ЭлементДанныхРесурса = Элементы["ДанныеРесурс" + НомерГруппироки];
			ЭлементДанныхРесурса.Видимость = Истина;
			ЭлементДанныхРесурса.Заголовок = "";
		КонецЦикла;
	КонецЕсли;
	
	
	Объект.Данные.Очистить();
	Данные = Объект.Данные.Выгрузить();
	СтрокаДанных = Неопределено;
	
	Для Каждого ИдентификаторСтрокиФайлам Из ИдентификаторыСтрокФайлов Цикл
		СтрокаФайла = Объект.ФайлыЖурналов.НайтиПоИдентификатору(ИдентификаторСтрокиФайлам);
		Если СтрокаФайла = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ПрочитатьДанныеФайлаТЖ(СтрокаФайла.Путь, События, Данные, СтрокаФайла.Дата);
	КонецЦикла;
	
	Объект.Данные.Загрузить(Данные);
	
	ВремяЧтения = (ТекущаяУниверсальнаяДатаВМиллисекундах() - НачалоЧтения);
	
	Сообщить("Данные прочитаны за " + Формат(Окр(ВремяЧтения / 1000, 1)) + " сек.");
		
КонецПроцедуры

&НаСервере
Процедура ПрочитатьДанныеФайлаТЖ(ИмяФайла, СобытияТЖ, ДанныеТЖ, ВремяФайла)
	
	ПараметрыЧтенияТЖ = ПолучитьПараметрыЧтенияТЖ();
	
	СтрокаДанных = Неопределено;
	
	ЧтениеТЖ = Новый ЧтениеТекста;
	ЧтениеТЖ.Открыть(ИмяФайла,,,, Ложь);
	
	ТекущаяЗаписьТЖ = Неопределено;
	ПараметрыТЖ = Новый Массив;
		
	Если ЗначениеЗаполнено(Объект.ДатаНачала) И НачалоЧаса(ВремяФайла) = НачалоЧаса(Объект.ДатаНачала) Тогда
		ВремяМин = Формат(Объект.ДатаНачала, "ДФ=mm:ss");
	Иначе
	    ВремяМин = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДатаОкончания) И НачалоЧаса(ВремяФайла) = НачалоЧаса(Объект.ДатаОкончания) Тогда
		ВремяМакс = Формат(Объект.ДатаОкончания, "ДФ=mm:ss") + ".999999";
	Иначе
	    ВремяМакс = "59:59.999999";
	КонецЕсли;
	
	НомерСтроки = 0;
	
	ЕстьОграничениеЧтенияСтрокФайлаТЖ = ЗначениеЗаполнено(Объект.ЧитатьМаксКоличествоСтрокФайлаТЖ);

	СтрокаТЖ = "";
	Пока СледующаяСтрока(ЧтениеТЖ, СтрокаТЖ) Цикл
		
		НомерСтроки = НомерСтроки + 1;
		
		Если ЕстьОграничениеЧтенияСтрокФайлаТЖ И НомерСтроки >= Объект.ЧитатьМаксКоличествоСтрокФайлаТЖ Тогда
			Прервать;	
		КонецЕсли;
		
		РезультатЗаписьТЖ = РазобратьНачалоЗаписиТЖ(ПараметрыЧтенияТЖ, СтрокаТЖ, ИмяФайла, НомерСтроки);
		Если РезультатЗаписьТЖ <> Неопределено Тогда
			//	Запись обрабатываемого (текущего) события.
			ЗаписатьДанныеСобытияТЖ(ПараметрыЧтенияТЖ, ТекущаяЗаписьТЖ, ПараметрыТЖ, СобытияТЖ, ДанныеТЖ);
			Если РезультатЗаписьТЖ.Время >= ВремяМин И РезультатЗаписьТЖ.Время <= ВремяМакс Тогда
				ТекущаяЗаписьТЖ = РезультатЗаписьТЖ;
				//	Массив строк с описанием параметров ТЖ.
				ПараметрыТЖ = Новый Массив;
				ПараметрыТЖ.Добавить(РезультатЗаписьТЖ.ПодстрокаПараметров);
			ИначеЕсли РезультатЗаписьТЖ.Время > ВремяМакс Тогда
				Прервать; // Прерывание чтения файла по времени.
			Иначе
				ТекущаяЗаписьТЖ = Неопределено;
				ПараметрыТЖ = Новый Массив;
			КонецЕсли;
		Иначе
			ПараметрыТЖ.Добавить(СтрокаТЖ);
		Конецесли;
	КонецЦикла;
	
	ЗаписатьДанныеСобытияТЖ(ПараметрыЧтенияТЖ, ТекущаяЗаписьТЖ, ПараметрыТЖ, СобытияТЖ, ДанныеТЖ);
	
	ЧтениеТЖ.Закрыть();
			
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДанныеСобытияТЖ(ПараметрыЧтениеТЖ, ТекущаяЗаписьТЖ, ПараметрыТЖ, СобытияТЖ, ДанныеТЖ) 
	
	Если ТекущаяЗаписьТЖ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Событие = ТекущаяЗаписьТЖ.Событие;
	Если ПустаяСтрока(Событие) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаСобытия = СобытияТЖ.Найти(Событие, "Имя");
	Если СобытияТЖ.Количество() > 0 И СтрокаСобытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстПараметровТЖ = СтрСоединить(ПараметрыТЖ, Символы.ПС);

	ТекущаяЗаписьТЖ.РазмерТекста = ТекущаяЗаписьТЖ.РазмерТекста + СтрДлина(ТекстПараметровТЖ);
	
	СоответствиеПараметровТЖ = Новый Соответствие;
	ИменаПараметровТЖ = Новый Массив;
	
	//	Получение списка параметров для получения из ТЖ.
	Если СтрокаСобытия <> Неопределено Тогда
		Для НомерГруппировки = 1 По 5 Цикл
			Колонка = "Группировка" + НомерГруппировки;
			Если Не ПустаяСтрока(СтрокаСобытия[Колонка]) Тогда
				ИменаПараметровТЖ.Добавить(СтрокаСобытия[Колонка]);
				СоответствиеПараметровТЖ.Вставить(СтрокаСобытия[Колонка], Колонка);
			КонецЕсли;		
		КонецЦикла;
		Для НомерРесурса = 1 По 5 Цикл
			Колонка = "Ресурс" + НомерРесурса;
			Если Не ПустаяСтрока(СтрокаСобытия[Колонка]) Тогда
				ИменаПараметровТЖ.Добавить(СтрокаСобытия[Колонка]);
				СоответствиеПараметровТЖ.Вставить(СтрокаСобытия[Колонка], Колонка);
			КонецЕсли;		
		КонецЦикла;
	КонецЕсли;
	
	ОтборДанных = Новый Структура("Событие", Событие);
	Ресурсы = Новый Структура;	
	
	//	Группировка по файлам.
	Если СтрокаСобытия <> Неопределено Тогда
		Если СтрокаСобытия.ПоФайлам Тогда
			ОтборДанных.Вставить("Файл", ТекущаяЗаписьТЖ.Файл);
		КонецЕсли;
	КонецЕсли;
	
	//	Парсинг текста параметров ТЖ.
	Если СоответствиеПараметровТЖ.Количество() = 1 Или Объект.ПолучатьЗначенияПараметровПоОдному Тогда
		ЗначенияПараметров = Новый Соответствие;
		Для Каждого ИмяПараметраТЖ Из ИменаПараметровТЖ Цикл
			ЗначениеПараметраТЖ = ПолучитьЗначениеПараметраЗаписиТЖ(ПараметрыЧтениеТЖ, ИмяПараметраТЖ, ТекстПараметровТЖ);
			ЗначенияПараметров.Вставить(ИмяПараметраТЖ, ЗначениеПараметраТЖ);
		КонецЦикла;
	ИначеЕсли СоответствиеПараметровТЖ.Количество() > 1 Тогда
		ЗначенияПараметров = ПолучитьНесколькоПараметровЗаписиТЖ(ПараметрыЧтениеТЖ, ИменаПараметровТЖ, ТекстПараметровТЖ);
	Иначе
		ЗначенияПараметров = Новый Соответствие;
	КонецЕсли;
	
	//	Запись данных события.
	Для Каждого КлючИЗначение Из ЗначенияПараметров Цикл
		КолонкаПараметра = СоответствиеПараметровТЖ[КлючИЗначение.Ключ];
		Если Сред(КолонкаПараметра, 1, 1) = "Г" Тогда
			ОтборДанных.Вставить(КолонкаПараметра, СокрЛП(КлючИЗначение.Значение));
		Иначе
			Ресурсы.Вставить(КолонкаПараметра, СтрокуВЧисло(КлючИЗначение.Значение));
		КонецЕсли;
	КонецЦикла;
	
	НайденныеСтроки = ДанныеТЖ.НайтиСтроки(ОтборДанных);
	Если НайденныеСтроки.Количество() > 0 Тогда
		СтрокаДанных = НайденныеСтроки[0];
	Иначе
		СтрокаДанных = ДанныеТЖ.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДанных, ОтборДанных);
	КонецЕсли;
	
	СтрокаДанных.Файл = ТекущаяЗаписьТЖ.Файл;
	СтрокаДанных.НомерСтрокиФайла = ТекущаяЗаписьТЖ.НомерСтрокиФайла; 
	СтрокаДанных.Время = ТекущаяЗаписьТЖ.Время;
	СтрокаДанных.Количество = СтрокаДанных.Количество + 1;
	СтрокаДанных.Длительность = СтрокаДанных.Длительность + ТекущаяЗаписьТЖ.Длительность / 1000000;
	СтрокаДанных.ТекстПараметров = ТекстПараметровТЖ;
	СтрокаДанных.РазмерТекста = ТекущаяЗаписьТЖ.РазмерТекста;
	
	Для Каждого ПолеРесурса Из Ресурсы Цикл
		СтрокаДанных[ПолеРесурса.Ключ] = СтрокаДанных[ПолеРесурса.Ключ] + ПолеРесурса.Значение;
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыЧтенияТЖ()
	
	//	Регулярные выражения парсинга журнала.
	ШаблонНачалоЗаписиТЖ = "^(\d{2}:\d{2}\.\d{6})-(\d+)\,(\w+?)\,(\d)(?:\,|$)";
	ШаблонВсеПараметрыТЖ = "((\w:)?\w+?)=([""']?)((?:\.|\n)+?)\3(?:\,|$)";
	ШаблонОдинПараметрТЖ = "(param)=([""']?)((?:.|\n)+?)\2(?:\,|$)";
	ШаблонНеколькоПараметровТЖ = "((?:params))=([""']?)((?:.|\n)+?)\2(?:\,|$)";
		
	ПараметрыЧтения = Новый Структура;
	ПараметрыЧтения.Вставить("НачалоЗаписиТЖ", РегулярноеВыражение(ШаблонНачалоЗаписиТЖ, Истина, Ложь, Ложь));
	ПараметрыЧтения.Вставить("ВсеПараметрыТЖ", РегулярноеВыражение(ШаблонВсеПараметрыТЖ, Истина, Истина, Истина));
	ПараметрыЧтения.Вставить("ШаблонНеколькоПараметровТЖ", ШаблонНеколькоПараметровТЖ);
	ПараметрыЧтения.Вставить("НеколькоПараметровТЖ", РегулярноеВыражение(ШаблонНеколькоПараметровТЖ, Истина, Истина, Истина));	
	ПараметрыЧтения.Вставить("ШаблонОдинПараметрТЖ", ШаблонОдинПараметрТЖ);
	ПараметрыЧтения.Вставить("ОдинПараметрТЖ", РегулярноеВыражение(ШаблонОдинПараметрТЖ, Истина, Ложь, Истина));
	
	Возврат ПараметрыЧтения;
		
КонецФункции

&НаСервере
Функция РазобратьНачалоЗаписиТЖ(ПараметрыЧтенияТЖ, СтрокаТЖ, Файл, НомерСтрокиФайла)
	
	РезультатВыражения = ВыполнитьРегулярноеВыражение(ПараметрыЧтенияТЖ.НачалоЗаписиТЖ, СтрокаТЖ);
	Если РезультатВыражения.ВсегоВхождений = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Новый Структура("Файл, НомерСтрокиФайла, Время, Длительность, Событие, Уровень, ПодстрокаПараметров, РазмерТекста", Файл, НомерСтрокиФайла);
	
	Match = РезультатВыражения.Вхождения.Item(0);
	SubMatches = Match.SubMatches;
	
	Результат.Время = SubMatches.Item(0);
	Результат.Длительность = Число(SubMatches.Item(1));
	Результат.Событие = SubMatches.Item(2);
	Результат.Уровень = SubMatches.Item(3);
	Результат.ПодстрокаПараметров = Сред(СтрокаТЖ, Match.Length + 1);
	Результат.РазмерТекста = СтрДлина(СтрокаТЖ);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьВсеПараметрыЗаписиТЖ(ПараметрыЧтенияТЖ, СтрокиТЖ)
	
	Если ТипЗнч(СтрокиТЖ) = Тип("Массив") Тогда
		ТекстПараметровТЖ = СтрСоединить(СтрокиТЖ, Символы.ПС) + ",";
	Иначе
		ТекстПараметровТЖ = СтрокиТЖ;
	КонецЕсли;
	
	РезультатВыражения = ВыполнитьРегулярноеВыражение(ПараметрыЧтенияТЖ.ВсеПараметрыТЖ, ТекстПараметровТЖ);
	КоличествоПараметров = РезультатВыражения.ВсегоВхождений;

	ПараметрыСобытия = Новый Соответствие;				
	Для НомерПараметра = 1 По КоличествоПараметров Цикл
		Match = РезультатВыражения.Вхождения.Item(НомерПараметра - 1);
		SubMatches = Match.SubMatches;
		ПараметрыСобытия.Вставить(SubMatches.Item(0), SubMatches.Item(3));
	КонецЦикла;
	
	Возврат ПараметрыСобытия;
	
КонецФункции

&НаСервере
Функция ПолучитьНесколькоПараметровЗаписиТЖ(ПараметрыЧтенияТЖ, ПараметрыТЗ, СтрокиТЖ)
	
	Если ТипЗнч(СтрокиТЖ) = Тип("Массив") Тогда
		ТекстПараметровТЖ = СтрСоединить(СтрокиТЖ, Символы.ПС) + ",";
	Иначе
		ТекстПараметровТЖ = СтрокиТЖ;
	КонецЕсли;
	
	Шаблон = СтрЗаменить(ПараметрыЧтенияТЖ.ШаблонНеколькоПараметровТЖ, "params", СтрСоединить(ПараметрыТЗ, "|"));
	ПараметрыЧтенияТЖ.НеколькоПараметровТЖ.Pattern = Шаблон;

	РезультатВыражения = ВыполнитьРегулярноеВыражение(ПараметрыЧтенияТЖ.НеколькоПараметровТЖ, ТекстПараметровТЖ);
	КоличествоПараметров = РезультатВыражения.ВсегоВхождений;

	ПараметрыСобытия = Новый Соответствие;				
	Для НомерПараметра = 1 По КоличествоПараметров Цикл
		Match = РезультатВыражения.Вхождения.Item(НомерПараметра - 1);
		SubMatches = Match.SubMatches;
		ПараметрыСобытия.Вставить(SubMatches.Item(0), SubMatches.Item(2));
	КонецЦикла;
	
	Возврат ПараметрыСобытия;
	
КонецФункции

&НаСервере
Функция ПолучитьЗначениеПараметраЗаписиТЖ(ПараметрыЧтенияТЖ, ИмяПараметра, СтрокиТЖ)
	
	Если ПустаяСтрока(ИмяПараметра) Тогда
		Возврат "";
	КонецЕсли;
	
	Если ТипЗнч(СтрокиТЖ) = Тип("Массив") Тогда
		ТекстПараметровТЖ = СтрСоединить(СтрокиТЖ, Символы.ПС) + ",";
	Иначе
		ТекстПараметровТЖ = СтрокиТЖ;
	КонецЕсли;
	
	Шаблон = СтрЗаменить(ПараметрыЧтенияТЖ.ШаблонОдинПараметрТЖ, "param", ИмяПараметра);
	ПараметрыЧтенияТЖ.ОдинПараметрТЖ.Pattern = Шаблон;
		
	РезультатВыражения = ВыполнитьРегулярноеВыражение(ПараметрыЧтенияТЖ.ОдинПараметрТЖ, ТекстПараметровТЖ);
	Если РезультатВыражения.ВсегоВхождений > 0 Тогда
		Match = РезультатВыражения.Вхождения.Item(0);
		SubMatches = Match.SubMatches;		
		Возврат SubMatches.Item(2);
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИменаПроцессов() 
	Массив = Новый Массив;
	Массив.Добавить("1cv8");
	Массив.Добавить("1cv8c");
	Массив.Добавить("1cv8s");
	Массив.Добавить("crserver");
	Массив.Добавить("dbgs");
	Массив.Добавить("httpd");
	Массив.Добавить("mmc");
	Массив.Добавить("ragent");
	Массив.Добавить("rphost");
	Массив.Добавить("rmngr");
	Массив.Добавить("w3wp");
	Возврат Массив;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РаспарситьИмяФайлаТЖ(ИмяФайла)
	
	Результат = Новый Структура("Имя, Папка, Процесс, НомерПроцесса, Дата");

	Файл = Новый Файл(ИмяФайла);
	Папка = Новый Файл(Файл.Путь);
	
	Имя = Файл.ИмяБезРасширения;
	ИмяПапки = Папка.ИмяБезРасширения;
	
	Результат.Имя = Имя;
	Результат.Папка = ИмяПапки;
	Результат.Процесс = "";
	Результат.НомерПроцесса = 0;
				
	МассивСтрок = СтрРазделить(ИмяПапки, "_");
	Если МассивСтрок.Количество() = 2 И СтрТолькоЦифры(МассивСтрок[1]) Тогда
		Результат.Процесс = МассивСтрок[0];
		Результат.НомерПроцесса = СтрокуВЧисло(МассивСтрок[1]);
	КонецЕсли;
		
	Результат.Дата = Дата(1, 1, 1);
	Если СтрДлина(Имя) = 8 И СтрТолькоЦифры(Имя) Тогда
		
		Год = Число("20" + Лев(Имя, 2));
		Месяц = Число(Сред(Имя, 3, 2));
		День = Число(Сред(Имя, 5, 2));
		Час = Число(Сред(Имя, 7, 2));
		
		Результат.Дата = Дата(Год, Месяц, День, Час, 0, 0);
		
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область РегулярныеВыражения

&НаСервере
Функция ПроверитьРегулярноеВыражение(Выражение, Текст) 
	Если ТипПлатформыLinux Тогда
		Возврат СтрНайти(ВРег(Текст), ВРег(Выражение)) > 0;
	Иначе
		Возврат Выражение.Test(Текст);
	КонецЕсли;
КонецФункции

&НаСервере
Функция ВыполнитьРегулярноеВыражение(Выражение, Текст) 
	
	Структура = Новый Структура;
	Структура.Вставить("ВсегоВхождений", 0);
	Структура.Вставить("Вхождения");

	Если ТипПлатформыLinux Тогда
		ТекстОшибки = "Выполнение регулярных выражений не поддерживается на платформе Linux.";
		ВызватьИсключение ТекстОшибки;
	Иначе
		Matches = Выражение.Execute(Текст);
		Структура.ВсегоВхождений = Matches.Count();
		Структура.Вхождения = Matches;
	КонецЕсли;
	
	Возврат Структура;
	
КонецФункции

&НаСервере
Функция РегулярноеВыражение(Шаблон, УчитыватьРегистр = Ложь, ГлобальныйПоиск = Ложь, Многострочность = Ложь)
	
	Если ТипПлатформыLinux Тогда
		Выражение = Шаблон;
	Иначе
		//	Получение всех параметров ТЖ.
		Выражение = Новый COMОбъект("VBScript.RegExp");
		Выражение.IgnoreCase = Не УчитыватьРегистр;
		Выражение.MultiLine = Многострочность;
		Выражение.Global = ГлобальныйПоиск;
		Выражение.Pattern = Шаблон;
	КонецЕсли;

	Возврат Выражение;
	
КонецФункции

#КонецОбласти

#Область ПоискСтрокПоШаблону

// Подстрока1 || Подстрока2 || Подстрока3 && Подстрока4 
// || - ИЛИ
// && - И

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПравилаПоиска(ШаблонПоиска)
	
	Если ПустаяСтрока(ШаблонПоиска) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПравилаПоиска = Новый Структура;
	ПравилаПоиска.Вставить("ИЛИ", Новый Массив);
	
	МассивИЛИ = СтрРазделить(ШаблонПоиска, "||");
	Для Каждого ПоискИЛИ Из МассивИЛИ Цикл
		
		Если ПустаяСтрока(ПоискИЛИ) Тогда
			Продолжить;
		КонецЕсли;
		
		ПоискИЛИ = СокрЛП(ПоискИЛИ);
		МассивИ = СтрРазделить(ПоискИЛИ, "&&");
		
		ПравилаПоискаИ = Новый Структура("И", Новый Массив);

		Для Каждого ПоискИ Из МассивИ Цикл
			
			Если ПустаяСтрока(ПоискИ) Тогда
				Продолжить;
			КонецЕсли;
			
			ПоискИ = СокрЛП(ПоискИ);
			ПравилаПоискаИ.И.Добавить(ПоискИ);			
			
		КонецЦикла;
		
		Если ПравилаПоискаИ.И.Количество() > 0 Тогда
			ПравилаПоиска.ИЛИ.Добавить(ПравилаПоискаИ);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПравилаПоиска;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПроверитьСтрокуПоПравиламПоиска(ПравилаПоиска, ПроверяемаяСтрока)
	
	Если ПравилаПоиска = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ПравилаПоиска.ИЛИ.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Для Каждого ПравилоИЛИ Из ПравилаПоиска.ИЛИ Цикл
		
		ПройденоПравилоИЛИ = Истина;
		
		Если ПравилоИЛИ.И.Количество() > 0 Тогда
			Для Каждого ПоискИ Из ПравилоИЛИ.И Цикл
				Если ПустаяСтрока(ПоискИ) Тогда
					Продолжить;
				КонецЕсли;
				Если СтрНайти(ПроверяемаяСтрока, ПоискИ) = 0 Тогда
					ПройденоПравилоИЛИ = Ложь;
					Прервать;
				Конецесли;
			КонецЦикла;
		Иначе
			ПройденоПравилоИЛИ = Ложь;
		КонецЕсли;
		
		Если ПройденоПравилоИЛИ Тогда
			Возврат Истина;
		КонецЕсли;
				
	КонецЦикла;
	
	Возврат Ложь;
		
КонецФункции

#КонецОбласти

#Область РаботаСБаш

&НаКлиенте
Процедура ВыполнитьБаш(Команда)
	ВыполнитьБашНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВыполнитьБашНаСервере()
	
	ВыполнитьСкриптБаш(ТекстБашСкрипта,,, ТекстРезультатаБашСкрипта);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВыполнитьСкриптБаш(ТекстСкрипта, ПараметрыСкрипта = "", ТекущийКаталог = "", РезультатСкрипта = "")
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	ТипПлатформыLinux = (СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86
	Или СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86_64);

	ФайлСкрипта = ПолучитьИмяВременногоФайла(".sh");
	ФайлРезультата = ПолучитьИмяВременногоФайла(".out");
		
	ФайлСкриптаБаш = ПолучитьПутьКФайлуБаш(ФайлСкрипта, ТипПлатформыLinux);
	ФайлРезультатаБаш = ПолучитьПутьКФайлуБаш(ФайлРезультата, ТипПлатформыLinux);
	
	ТекстСкриптаСЗаголовком =
	"#!/bin/bash
	|
	|%1";
	
	ТекстСкриптаСЗаголовком = СтрШаблон(ТекстСкриптаСЗаголовком, 
		ТекстСкрипта
	);
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ТекстСкриптаСЗаголовком);	
	ТекстовыйДокумент.Записать(ФайлСкрипта, КодировкаТекста.OEM, Символы.ПС);
	
	КомандаБаш = "bash """ + ФайлСкриптаБаш + """ " + ПараметрыСкрипта + " > """ + ФайлРезультатаБаш + """ 2>&1";
	
	КодВозврата = ВыполнитьОднострочнуюКомандуБаш(КомандаБаш, ТекущийКаталог);
	Если КодВозврата <> 0 Тогда
		Сообщить("Ошибка выполнения скрипта: " + КодВозврата);
	КонецЕсли;
	УдалитьФайлы(ФайлСкрипта);
	
	Если Не ТипПлатформыLinux Тогда
		// UTF-8 - BOM: EF BB BF | 239 187 191
		ВременныйФайл = ПолучитьИмяВременногоФайла(".tmp");
		ВременныйФайлБаш = ПолучитьПутьКФайлуБаш(ВременныйФайл, ТипПлатформыLinux);
		КопироватьФайл(ФайлРезультата, ВременныйФайл);
		КомандаДобавитьBOM = "printf ""\xef\xbb\xbf"" | cat - " + ВременныйФайлБаш + " > " + ФайлРезультатаБаш + "";
		ВыполнитьОднострочнуюКомандуБаш(КомандаДобавитьBOM);
	КонецЕсли;
		
	Файл = Новый Файл(ФайлРезультата);
	Если Файл.Существует() Тогда
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.Прочитать(ФайлРезультата);
		РезультатСкрипта = ТекстовыйДокумент.ПолучитьТекст();
		РезультатСкрипта = СтрЗаменить(РезультатСкрипта, ФайлСкриптаБаш, "script.sh");
		РезультатСкрипта = СтрЗаменить(РезультатСкрипта, ФайлРезультатаБаш, "script.out");
		УдалитьФайлы(ФайлРезультата);
	Иначе
		РезультатСкрипта = "";
	КонецЕсли;
	
	Возврат КодВозврата
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВыполнитьОднострочнуюКомандуБаш(КомандаБашОднойСтрокой, ТекущийКаталог = "")
	
	КодВозврата = Неопределено;
	
	Если Найти(КомандаБашОднойСтрокой, """") > 0 Тогда
		КавычкаКоманды = "'";
	Иначе
		КавычкаКоманды = """";
	Конецесли;
	
	СистемнаяИнформация = Новый СистемнаяИнформация;

	ТипПлатформыLinux = (СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86
	Или СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86_64);
	
	Если ТипПлатформыLinux Тогда
		ПутьБаш = "bash";
	Иначе
		ПутьБаш = """C:\Program Files\Git\bin\bash""";
	КонецЕсли;
	
	КомандаПриложения = ПутьБаш + " -c " + КавычкаКоманды + КомандаБашОднойСтрокой + КавычкаКоманды;
	ЗапуститьПриложение(КомандаПриложения, ТекущийКаталог, Истина, КодВозврата);
	
	Возврат КодВозврата
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПутьКФайлуБаш(ПутьКФайлу, ЭтоLinux) 
	Если ЭтоLinux Тогда
		Возврат ПутьКФайлу;
	Иначе
		ПозицияРазделителя = Найти(ПутьКФайлу, ":");
		Если ПозицияРазделителя > 0 Тогда
			ИмяДиска = СокрЛП(Лев(ПутьКФайлу, ПозицияРазделителя - 1));
			ОтносительныйПуть = Сред(ПутьКФайлу, ПозицияРазделителя + 1);
			ПутьКФайлуБаш = "/" + НРег(ИмяДиска) + СтрЗаменить(ОтносительныйПуть, "\", "/");
		Иначе
			ПутьКФайлуБаш = СтрЗаменить(ПутьКФайлу, "\", "/");
		КонецЕсли;
		Возврат ПутьКФайлуБаш;
	КонецЕсли;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыФункции

&НаКлиенте
Процедура УстановитьЗначениеПоляТаблицы(Таблица, Элемент, Значение, Поле) Экспорт
	Для Каждого СтрокаТаблицы Из Таблица цикл
		Если Элемент.ПроверитьСтроку(СтрокаТаблицы.ПолучитьИдентификатор()) Тогда
			СтрокаТаблицы[Поле] = Значение;
		КонецЕсли;		
	КонецЦикла;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтрТолькоЦифры(Строка)
	ДлинаСтроки = СтрДлина(Строка);
	Для НомерСимвола = 1 По ДлинаСтроки Цикл
		Символ = Сред(Строка, НомерСимвола, 1);
		Если Символ < "0" Или Символ > "9" Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СледующаяСтрока(ЧтениеТекста, СтрокаТекста) 
	СтрокаТекста =  ЧтениеТекста.ПрочитатьСтроку();
	Возврат СтрокаТекста <> Неопределено;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокуВЧисло(Строка) 
	Если ПустаяСтрока(Строка) Тогда
		Возврат 0;
	КонецЕсли;
	Попытка 
		Возврат Число(Строка);
	Исключение
		Возврат 0;
	КонецПопытки;
КонецФункции

&НаСервереБезКонтекста
Процедура СохранитьТаблицуВНастройках(Настройки, ИмяНастройки, Таблица)
	ХранилищеЗначения = Новый ХранилищеЗначения(Таблица.Выгрузить(), Новый СжатиеДанных(9));
	Настройки.Вставить(ИмяНастройки, ХранилищеЗначения);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВосстановитьТаблицуИзНастроек(Настройки, ИмяНастройки, Таблица)
	ЗначениеНастройки = Настройки[ИмяНастройки];
	Если ТипЗнч(ЗначениеНастройки) = Тип("ХранилищеЗначения") Тогда
		СохраненнаяТаблица = ЗначениеНастройки.Получить();
		Если ТипЗнч(СохраненнаяТаблица) = Тип("ТаблицаЗначений") Тогда
			Таблица.Загрузить(СохраненнаяТаблица);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

